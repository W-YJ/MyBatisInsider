<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象
mapper.xml以statement为单位管理sql语句-->
<mapper namespace="test">
    <!-- 根据id查询用户信息 -->
    <!--
        id:唯一标志一个statement
        #{}:表示一个占位符，如果#{}中传入简单类型的参数，#{}中的名称随意
        parameterType：输入参数的类型，通过#{}接收parameterType输入的参数
        resultType：输出结果类型，不管返回的是多条还是单条，指定单条记录映射的pojo类型
    -->
    <select id="findUserById" parameterType="int" resultType="domain.User">
        SELECT * FROM USER WHERE id = #{id}
    </select>

    <!-- 根据用户名称查询用户信息，可能返回多条
    ${}:表示sql的拼接，通过${}接收参数，将参数的内容不加任何修饰拼接在sql中-->
    <!--
    补充：#{}与${}区别：
    #{}:
    1.表示一个占位符，向占位符输入参数，mybatis自动进行java类型和jdbc类型的转换。
    2.程序员不需要考虑参数的类型，比如：传入字符串，mybatis最终拼接好的sql就是参数两边加单引号。
    3.#{}接收pojo(Plain Old Java Object Java数据对象)数据，可以使用OGNL(就是el表达式)解析出pojo的属性值。
    ${}:
    1.表示sql的拼接，通过${}接收参数，将参数的内容不加任何修饰拼接在sql中。
    2.${}也可以接收pojo数据，可以使用OGNL解析出pojo的属性值。
    3.缺点:不能防止sql注入。
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="domain.User">
        select * from user where username like '%${value}'
    </select>

    <!-- 添加用户
    parameterType：输入参数的类型，User对象包括 username，birthday，sex，address】
    #{}接收pojo数据，可以使用OGNL解析出pojo的属性值
    #{username}表示从parameterType中获取pojo的属性值
    selectKey：用于进行主键返回，定义了获取主键的sql
    order：设置selectKey中的sql执行的顺序，相对于insert语句来说
    keyProperty：将主键值设置到哪个属性
    resultType：select LAST_INSERT_ID()的结果 类型-->
    <insert id="insertUser" parameterType="domain.User">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            <!-- order属性表示该字段在执行insert语句后才执行，另外我们需要借助
            LAST_INSERT_ID()函数-->
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO USER VALUE (#{id},#{username},#{birthday},#{sex},#{address})
    </insert>

    <!-- mysql的uuid生成主键 -->
    <insert id = "insertUser_uuid" parameterType="domain.User">
        <selectKey keyProperty="id" order="BEFORE" resultType="string">
            select uuid()
        </selectKey>

        INSERT INTO USER VALUES(#{id},#{username},#{birthday},#{sex},#{address})
    </insert>

    <delete id="deleteUser" parameterType="int">
        delete from user where id=#{id}
    </delete>

    <update id="updateUser" parameterType="domain.User">
        update user set username=#{username}, birtheday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
    </update>
</mapper>